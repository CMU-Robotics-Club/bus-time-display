// Define the pins used for each connection
#define CLK 21
#define SO 15
int ROWS[] = {19,18,5,17,16,4,2};

// Define the font
#define LETTER_WIDTH 7
uint8_t FONT[][LETTER_WIDTH] {
{0x00,0x00,0x00,0x00,0x00,0x00}, //  
{0x08,0x08,0x08,0x08,0x00,0x08}, // !
{0x14,0x14,0x00,0x00,0x00,0x00}, // "
{0x14,0x3E,0x14,0x14,0x3E,0x14}, // #
{0x08,0x1E,0x28,0x1C,0x0A,0x3C}, // $
{0x32,0x34,0x08,0x08,0x16,0x26}, // %
{0x10,0x28,0x10,0x2A,0x24,0x1A}, // &
{0x08,0x08,0x00,0x00,0x00,0x00}, // '
{0x04,0x08,0x08,0x08,0x08,0x04}, // (
{0x10,0x08,0x08,0x08,0x08,0x10}, // )
{0x14,0x08,0x14,0x00,0x00,0x00}, // *
{0x00,0x08,0x08,0x3E,0x08,0x08}, // +
{0x00,0x00,0x00,0x00,0x08,0x08}, // ,
{0x00,0x00,0x00,0x3E,0x00,0x00}, // -
{0x00,0x00,0x00,0x00,0x00,0x08}, // .
{0x04,0x04,0x08,0x08,0x10,0x10}, // /
{0x1C,0x22,0x22,0x22,0x22,0x1C}, // 0
{0x08,0x18,0x08,0x08,0x08,0x1C}, // 1
{0x3C,0x02,0x04,0x08,0x10,0x3E}, // 2
{0x3C,0x02,0x0C,0x02,0x02,0x3C}, // 3
{0x24,0x24,0x3E,0x04,0x04,0x04}, // 4
{0x3E,0x20,0x3C,0x02,0x02,0x3C}, // 5
{0x1E,0x20,0x3C,0x22,0x22,0x1C}, // 6
{0x3E,0x02,0x04,0x04,0x08,0x08}, // 7
{0x1C,0x22,0x1C,0x22,0x22,0x1C}, // 8
{0x1C,0x22,0x1E,0x02,0x02,0x3C}, // 9
{0x00,0x08,0x00,0x00,0x08,0x00}, // :
{0x00,0x08,0x00,0x00,0x08,0x08}, // ;
{0x00,0x06,0x18,0x20,0x18,0x06}, // <
{0x00,0x00,0x3E,0x00,0x3E,0x00}, // =
{0x00,0x30,0x0C,0x02,0x0C,0x30}, // >
{0x3C,0x02,0x04,0x08,0x00,0x08}, // ?
{0x1C,0x26,0x2A,0x26,0x20,0x1C}, // @
{0x1C,0x22,0x3E,0x22,0x22,0x22}, // A
{0x3C,0x22,0x3C,0x22,0x22,0x3C}, // B
{0x1E,0x20,0x20,0x20,0x20,0x1E}, // C
{0x3C,0x22,0x22,0x22,0x22,0x3C}, // D
{0x3E,0x20,0x3C,0x20,0x20,0x3E}, // E
{0x3E,0x20,0x3C,0x20,0x20,0x20}, // F
{0x1E,0x20,0x2E,0x22,0x22,0x1C}, // G
{0x22,0x22,0x3E,0x22,0x22,0x22}, // H
{0x1C,0x08,0x08,0x08,0x08,0x1C}, // I
{0x0E,0x04,0x04,0x24,0x24,0x18}, // J
{0x22,0x24,0x28,0x34,0x22,0x22}, // K
{0x20,0x20,0x20,0x20,0x20,0x3E}, // L
{0x22,0x36,0x2A,0x22,0x22,0x22}, // M
{0x22,0x32,0x2A,0x26,0x22,0x22}, // N
{0x1C,0x22,0x22,0x22,0x22,0x1C}, // O
{0x3C,0x22,0x3C,0x20,0x20,0x20}, // P
{0x1C,0x22,0x22,0x2A,0x24,0x1A}, // Q
{0x3C,0x22,0x3C,0x22,0x22,0x22}, // R
{0x1E,0x20,0x1C,0x02,0x02,0x3C}, // S
{0x3E,0x08,0x08,0x08,0x08,0x08}, // T
{0x22,0x22,0x22,0x22,0x22,0x1C}, // U
{0x22,0x22,0x22,0x14,0x14,0x08}, // V
{0x22,0x22,0x2A,0x2A,0x2A,0x14}, // W
{0x22,0x14,0x08,0x14,0x22,0x22}, // X
{0x22,0x14,0x08,0x08,0x08,0x08}, // Y
{0x3E,0x04,0x08,0x10,0x20,0x3E}, // Z
{0x0C,0x08,0x08,0x08,0x08,0x0C}, // [
{0x10,0x10,0x08,0x08,0x04,0x04}, // \ <-- backslash (I can't put that at the end of a comment without the C standard treating it as a linebreak escape and commenting out the next line of code LOL)
{0x18,0x08,0x08,0x08,0x08,0x18}, // ]
{0x08,0x14,0x14,0x00,0x00,0x00}, // ^
{0x00,0x00,0x00,0x00,0x00,0x3E}, // _
{0x10,0x08,0x00,0x00,0x00,0x00}, // `
{0x00,0x1C,0x02,0x1E,0x22,0x1E}, // a
{0x20,0x3C,0x22,0x22,0x22,0x3C}, // b
{0x00,0x1E,0x20,0x20,0x20,0x1E}, // c
{0x02,0x1E,0x22,0x22,0x22,0x1E}, // d
{0x00,0x1C,0x22,0x3E,0x20,0x1C}, // e
{0x0E,0x10,0x3C,0x10,0x10,0x10}, // f
{0x1C,0x22,0x22,0x1E,0x02,0x1C}, // g
{0x20,0x3C,0x22,0x22,0x22,0x22}, // h
{0x08,0x00,0x08,0x08,0x08,0x08}, // i
{0x08,0x00,0x08,0x08,0x08,0x30}, // j
{0x20,0x22,0x24,0x28,0x34,0x22}, // k
{0x08,0x08,0x08,0x08,0x08,0x04}, // l
{0x00,0x34,0x2A,0x2A,0x2A,0x2A}, // m
{0x00,0x3C,0x22,0x22,0x22,0x22}, // n
{0x00,0x1C,0x22,0x22,0x22,0x1C}, // o
{0x00,0x3C,0x22,0x22,0x3C,0x20}, // p
{0x00,0x1E,0x22,0x22,0x1E,0x02}, // q
{0x00,0x2E,0x30,0x20,0x20,0x20}, // r
{0x00,0x1C,0x20,0x1C,0x02,0x3C}, // s
{0x10,0x3C,0x10,0x10,0x10,0x0E}, // t
{0x00,0x22,0x22,0x22,0x22,0x1E}, // u
{0x00,0x22,0x22,0x14,0x14,0x08}, // v
{0x00,0x2A,0x2A,0x2A,0x2A,0x14}, // w
{0x00,0x22,0x14,0x08,0x14,0x22}, // x
{0x00,0x22,0x22,0x1E,0x02,0x1C}, // y
{0x00,0x3E,0x04,0x08,0x10,0x3E}, // z
{0x04,0x08,0x18,0x08,0x08,0x04}, // {
{0x08,0x08,0x08,0x08,0x08,0x08}, // |
{0x10,0x08,0x0C,0x08,0x08,0x10}  // }
};

// 96-bit buffer to store the data before it is written to the display
uint32_t message_bits[] = {0,0,0};

// Calculate the index into the font array given the character
uint8_t font_index(char c) {
  return c-32;
}

// Pack a row of bits to display
void pack_message_bits(int row, int col_offset) {
  message_bits[0] = 0;
  message_bits[1] = 0;
  message_bits[2] = 0;
  
  int mbits_i = 0;
  int bits_left = 95 + col_offset;
  for(int i = 0; bits_left > 0; i++) {
    int shift_amt = bits_left - (32 * (2-mbits_i)) - 7;
    if(shift_amt > 31) {
      bits_left -= 7;
      continue;
    }
    if(shift_amt >= 0) {
      if(i < message.length()) {
        message_bits[mbits_i] |= ((uint32_t) FONT[font_index(message.charAt(i))][row]) << shift_amt;
      } else {
        message_bits[mbits_i] |= ((uint32_t) FONT[font_index(' ')][row]) << shift_amt;
      }
    } else {
      if(i < message.length()) {
        message_bits[mbits_i] |= ((uint32_t) FONT[font_index(message.charAt(i))][row]) >> -shift_amt;
      } else {
        message_bits[mbits_i] |= ((uint32_t) FONT[font_index(' ')][row]) >> -shift_amt;
      }
      mbits_i++;
      if(mbits_i <= 2) {
        shift_amt = bits_left - (32 * (2-mbits_i)) - 7;
        if(i < message.length()) {
          message_bits[mbits_i] |= ((uint32_t) FONT[font_index(message.charAt(i))][row]) << shift_amt;
        } else {
          message_bits[mbits_i] |= ((uint32_t) FONT[font_index(' ')][row]) << shift_amt;
        }
      }
    }
    bits_left -= 7;
  }
}

void setup_display() {
  pinMode(CLK, OUTPUT);
  digitalWrite(CLK, LOW);
  pinMode(SO, OUTPUT);
  digitalWrite(SO, LOW);
  for(int i = 0; i < 7; i++) {
    pinMode(ROWS[i], OUTPUT);
    digitalWrite(ROWS[i], LOW);
  }
}

void draw_display(int col_offset) {
  // Display each row in succession
  for (int row = 0; row < 7; row++) {
    pack_message_bits(row, col_offset);

    // Shift the bits out to the display
    for(int i = 0; i < 3; i++) {
      for(int j = 31; j >= 0; j--) {
        digitalWrite(SO, ((message_bits[i]) >> j) & 1);
        delayMicroseconds(1);
        digitalWrite(CLK, HIGH);
        delayMicroseconds(1);
        digitalWrite(CLK, LOW);
        delayMicroseconds(1);
      }
    }

    // Enable the row for some amount of time
    digitalWrite(ROWS[row], HIGH);
    delayMicroseconds(200);
    digitalWrite(ROWS[row], LOW);
  }
}
